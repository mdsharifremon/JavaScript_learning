class ElementCollection extends Array{ready(cb){const isReady=this.some(e=>null!=e.readyState&&"loading"!=e.readyState);return isReady?cb():this.on("DOMContentLoaded",cb),this}on(event,cbOrSelector,cb){return"function"==typeof cbOrSelector?this.forEach(e=>e.addEventListener(event,cbOrSelector)):this.forEach(elem=>{elem.addEventListener(event,e=>{e.target.matches(cbOrSelector)&&cb(e)})}),this}next(){return this.map(e=>e.nextElementSibling).filter(e=>null!=e),this}prev(){return this.map(e=>e.previousElementSibling).filter(e=>null!=e),this}removeClass(className){return this.forEach(e=>e.classList.remove(className)),this}addClass(className){return this.forEach(e=>e.classList.add(className)),this}toggleClass(className){return this.forEach(e=>e.classList.toggle(className)),this}css(property,value){if("object"==typeof property)this.forEach(e=>{for(let key in property){const camelProp=key.replace(/(-[a-z])/,g=>g.replace("-","").toUpperCase());this.style[camelProp]=property[key]}});else{const camelProp=property.replace(/(-[a-z])/,g=>g.replace("-","").toUpperCase());this.forEach(e=>e.style[camelProp]=value)}return this}data(data){return this.forEach(e=>e.dataset[data]),this}addAttr(attrName,attrValue){return this.forEach(e=>e.setAttribute(attrName,attrValue)),this}removeAttr(attrName){return this.forEach(e=>e.removeAttribute(attrName)),this}text(text){if(text)return this.forEach(e=>e.innerText=text),this;this.forEach(e=>e.innerText)}html(html){if(html)return this.forEach(e=>e.innerHTML=html),this;this.forEach(e=>e.innerHTML)}}class AjaxPromise{constructor(promise){this.promise=promise}done(cb){return this.promise=this.promise.then(data=>(cb(data),data)),this}fail(cb){return this.promise=this.promise.catch(cb),this}always(cb){return this.promise=this.promise.finally(cb),this}}function jq(param){return"string"==typeof param||param instanceof String?new ElementCollection(...document.querySelectorAll(param)):new ElementCollection(param)}jq.get=function({url:url,data:data={},success:success=(()=>{}),dataType:dataType}){const queryString=Object.entries(data).map(([key,value])=>`${key}=${value}`).join("&");return new AjaxPromise(fetch(`${url}?${queryString}`,{method:"GET",headers:{"Content-Type":dataType}}).then(res=>{if(res.ok)return res.json();throw new Error(res.status)}).then(data=>(success(data),data)))};